-- Create a table to store pain point clusters generated by AI
CREATE TABLE IF NOT EXISTS public.pain_point_clusters (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  cluster_name TEXT NOT NULL,
  description TEXT,
  count INTEGER NOT NULL DEFAULT 0,
  pain_point_ids TEXT[] NOT NULL DEFAULT '{}',
  impact_summary JSONB,
  industries TEXT[] NOT NULL DEFAULT '{}',
  companies TEXT[] NOT NULL DEFAULT '{}',
  examples TEXT, -- Serialized JSON of example pain points
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Add RLS policies
ALTER TABLE public.pain_point_clusters ENABLE ROW LEVEL SECURITY;

-- Create policy for authenticated users
CREATE POLICY "Authenticated users can read pain point clusters"
  ON public.pain_point_clusters
  FOR SELECT
  TO authenticated
  USING (true);

-- Create policy for authenticated users to create/update
CREATE POLICY "Authenticated users can insert/update their own pain_point_clusters"
  ON public.pain_point_clusters
  FOR ALL
  TO authenticated
  USING (true);

-- Create a meta_data table for storing system-wide settings and timestamps
CREATE TABLE IF NOT EXISTS public.meta_data (
  key TEXT PRIMARY KEY,
  value TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Add RLS policies for meta_data
ALTER TABLE public.meta_data ENABLE ROW LEVEL SECURITY;

-- Create policy for authenticated users
CREATE POLICY "Authenticated users can read meta_data"
  ON public.meta_data
  FOR SELECT
  TO authenticated
  USING (true);

-- Create policy for authenticated users to manage meta_data
CREATE POLICY "Authenticated users can manage meta_data"
  ON public.meta_data
  FOR ALL
  TO authenticated
  USING (true);

-- Add function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add triggers to automatically update updated_at
CREATE TRIGGER update_pain_point_clusters_updated_at
BEFORE UPDATE ON pain_point_clusters
FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_meta_data_updated_at
BEFORE UPDATE ON meta_data
FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
